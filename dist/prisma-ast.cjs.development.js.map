{"version":3,"file":"prisma-ast.cjs.development.js","sources":["../src/lexer.ts","../src/parser.ts","../src/visitor.ts","../src/getSchema.ts","../src/schemaSorter.ts","../src/printSchema.ts","../src/PrismaSchemaBuilder.ts"],"sourcesContent":["import { createToken, Lexer, IMultiModeLexerDefinition } from 'chevrotain';\n\nexport const Identifier = createToken({\n  name: 'Identifier',\n  pattern: /[a-zA-Z]\\w*/,\n});\nexport const Datasource = createToken({\n  name: 'Datasource',\n  pattern: /datasource/,\n  push_mode: 'block',\n});\nexport const Generator = createToken({\n  name: 'Generator',\n  pattern: /generator/,\n  push_mode: 'block',\n});\nexport const Model = createToken({\n  name: 'Model',\n  pattern: /model/,\n  push_mode: 'block',\n});\nexport const Enum = createToken({\n  name: 'Enum',\n  pattern: /enum/,\n  push_mode: 'block',\n});\nexport const True = createToken({\n  name: 'True',\n  pattern: /true/,\n  longer_alt: Identifier,\n});\nexport const False = createToken({\n  name: 'False',\n  pattern: /false/,\n  longer_alt: Identifier,\n});\nexport const Null = createToken({\n  name: 'Null',\n  pattern: /null/,\n  longer_alt: Identifier,\n});\nexport const Comment = createToken({\n  name: 'Comment',\n  pattern: Lexer.NA,\n});\n\nexport const DocComment = createToken({\n  name: 'DocComment',\n  pattern: /\\/\\/\\/\\s*(.+)/,\n  categories: [Comment],\n});\nexport const LineComment = createToken({\n  name: 'LineComment',\n  pattern: /\\/\\/\\s*(.+)/,\n  categories: [Comment],\n});\nexport const Attribute = createToken({\n  name: 'Attribute',\n  pattern: Lexer.NA,\n});\nexport const ModelAttribute = createToken({\n  name: 'ModelAttribute',\n  pattern: /@@/,\n  label: \"'@@'\",\n  categories: [Attribute],\n});\nexport const FieldAttribute = createToken({\n  name: 'FieldAttribute',\n  pattern: /@/,\n  label: \"'@'\",\n  categories: [Attribute],\n});\nexport const Dot = createToken({\n  name: 'Dot',\n  pattern: /\\./,\n  label: \"'.'\",\n});\nexport const QuestionMark = createToken({\n  name: 'QuestionMark',\n  pattern: /\\?/,\n  label: \"'?'\",\n});\nexport const LCurly = createToken({\n  name: 'LCurly',\n  pattern: /{/,\n  label: \"'{'\",\n});\nexport const RCurly = createToken({\n  name: 'RCurly',\n  pattern: /}/,\n  label: \"'}'\",\n  pop_mode: true,\n});\nexport const LRound = createToken({\n  name: 'LRound',\n  pattern: /\\(/,\n  label: \"'('\",\n});\nexport const RRound = createToken({\n  name: 'RRound',\n  pattern: /\\)/,\n  label: \"')'\",\n});\nexport const LSquare = createToken({\n  name: 'LSquare',\n  pattern: /\\[/,\n  label: \"'['\",\n});\nexport const RSquare = createToken({\n  name: 'RSquare',\n  pattern: /\\]/,\n  label: \"']'\",\n});\nexport const Comma = createToken({\n  name: 'Comma',\n  pattern: /,/,\n  label: \"','\",\n});\nexport const Colon = createToken({\n  name: 'Colon',\n  pattern: /:/,\n  label: \"':'\",\n});\nexport const Equals = createToken({\n  name: 'Equals',\n  pattern: /=/,\n  label: \"'='\",\n});\nexport const StringLiteral = createToken({\n  name: 'StringLiteral',\n  pattern: /\"(:?[^\\\\\"\\n\\r]|\\\\(:?[bfnrtv\"\\\\/]|u[0-9a-fA-F]{4}))*\"/,\n});\nexport const NumberLiteral = createToken({\n  name: 'NumberLiteral',\n  pattern: /-?(0|[1-9]\\d*)(\\.\\d+)?([eE][+-]?\\d+)?/,\n});\nexport const WhiteSpace = createToken({\n  name: 'WhiteSpace',\n  pattern: /\\s+/,\n  group: Lexer.SKIPPED,\n});\nexport const LineBreak = createToken({\n  name: 'LineBreak',\n  pattern: /\\n|\\r\\n/,\n  line_breaks: true,\n  label: 'LineBreak',\n});\n\nconst naTokens = [Comment, DocComment, LineComment, LineBreak, WhiteSpace];\n\nexport const multiModeTokens: IMultiModeLexerDefinition = {\n  modes: {\n    global: [...naTokens, Datasource, Generator, Model, Enum],\n    block: [\n      ...naTokens,\n      Attribute,\n      ModelAttribute,\n      FieldAttribute,\n      Dot,\n      QuestionMark,\n      LCurly,\n      RCurly,\n      LSquare,\n      RSquare,\n      LRound,\n      RRound,\n      Comma,\n      Colon,\n      Equals,\n      True,\n      False,\n      Null,\n      StringLiteral,\n      NumberLiteral,\n      Identifier,\n    ],\n  },\n  defaultMode: 'global',\n};\n\nexport const PrismaLexer = new Lexer(multiModeTokens);\n","import { CstParser } from 'chevrotain';\nimport * as lexer from './lexer';\n\ntype ComponentType = 'datasource' | 'generator' | 'model' | 'enum';\nexport class PrismaParser extends CstParser {\n  constructor() {\n    super(lexer.multiModeTokens);\n    this.performSelfAnalysis();\n  }\n\n  private break = this.RULE('break', () => {\n    this.CONSUME1(lexer.LineBreak);\n    this.CONSUME2(lexer.LineBreak);\n  });\n\n  private keyedArg = this.RULE('keyedArg', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'keyName' });\n    this.CONSUME(lexer.Colon);\n    this.SUBRULE(this.value);\n  });\n\n  private array = this.RULE('array', () => {\n    this.CONSUME(lexer.LSquare);\n    this.MANY_SEP({\n      SEP: lexer.Comma,\n      DEF: () => {\n        this.SUBRULE(this.value);\n      },\n    });\n    this.CONSUME(lexer.RSquare);\n  });\n\n  private func = this.RULE('func', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'funcName' });\n    this.CONSUME(lexer.LRound);\n    this.MANY_SEP({\n      SEP: lexer.Comma,\n      DEF: () => {\n        this.OR([\n          { ALT: () => this.SUBRULE(this.keyedArg) },\n          { ALT: () => this.SUBRULE(this.value) },\n        ]);\n      },\n    });\n    this.CONSUME(lexer.RRound);\n  });\n\n  private value = this.RULE('value', () => {\n    this.OR([\n      { ALT: () => this.CONSUME(lexer.StringLiteral, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.NumberLiteral, { LABEL: 'value' }) },\n      { ALT: () => this.SUBRULE(this.array, { LABEL: 'value' }) },\n      { ALT: () => this.SUBRULE(this.func, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.True, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.False, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.Null, { LABEL: 'value' }) },\n      { ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'value' }) },\n    ]);\n  });\n\n  private property = this.RULE('property', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'propertyName' });\n    this.CONSUME(lexer.Equals);\n    this.SUBRULE(this.value, { LABEL: 'propertyValue' });\n  });\n\n  private assignment = this.RULE('assignment', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'assignmentName' });\n    this.CONSUME(lexer.Equals);\n    this.SUBRULE(this.value, { LABEL: 'assignmentValue' });\n  });\n\n  private field = this.RULE('field', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'fieldName' });\n    this.SUBRULE(this.value, { LABEL: 'fieldType' });\n    this.OPTION1(() => {\n      this.OR([\n        {\n          ALT: () => {\n            this.CONSUME(lexer.LSquare, { LABEL: 'array' });\n            this.CONSUME(lexer.RSquare, { LABEL: 'array' });\n          },\n        },\n        { ALT: () => this.CONSUME(lexer.QuestionMark, { LABEL: 'optional' }) },\n      ]);\n    });\n    this.MANY(() => {\n      this.SUBRULE(this.attribute, { LABEL: 'attributeList' });\n    });\n    this.OPTION2(() => {\n      this.CONSUME(lexer.Comment, { LABEL: 'comment' });\n    });\n  });\n\n  private block = this.RULE(\n    'block',\n    (\n      options: {\n        componentType?: ComponentType;\n      } = {}\n    ) => {\n      const { componentType } = options;\n      const isEnum = componentType === 'enum';\n      const isModel = componentType === 'model';\n\n      this.CONSUME(lexer.LCurly);\n      this.CONSUME1(lexer.LineBreak);\n      this.MANY(() => {\n        this.OR([\n          { ALT: () => this.SUBRULE(this.comment, { LABEL: 'list' }) },\n          {\n            GATE: () => isModel,\n            ALT: () => this.SUBRULE(this.property, { LABEL: 'list' }),\n          },\n          { ALT: () => this.SUBRULE(this.attribute, { LABEL: 'list' }) },\n          {\n            GATE: () => isModel,\n            ALT: () => this.SUBRULE(this.field, { LABEL: 'list' }),\n          },\n          {\n            GATE: () => isEnum,\n            ALT: () => this.SUBRULE(this.enum, { LABEL: 'list' }),\n          },\n          {\n            GATE: () => !isModel,\n            ALT: () => this.SUBRULE(this.assignment, { LABEL: 'list' }),\n          },\n          { ALT: () => this.SUBRULE(this.break, { LABEL: 'list' }) },\n          { ALT: () => this.CONSUME2(lexer.LineBreak) },\n        ]);\n      });\n      this.CONSUME(lexer.RCurly);\n    }\n  );\n\n  private enum = this.RULE('enum', () => {\n    this.CONSUME(lexer.Identifier, { LABEL: 'enumName' });\n    this.OPTION(() => {\n      this.CONSUME(lexer.Comment, { LABEL: 'comment' });\n    });\n  });\n  private attribute = this.RULE('attribute', () => {\n    this.OR1([\n      {\n        ALT: () =>\n          this.CONSUME(lexer.ModelAttribute, { LABEL: 'modelAttribute' }),\n      },\n      {\n        ALT: () =>\n          this.CONSUME(lexer.FieldAttribute, { LABEL: 'fieldAttribute' }),\n      },\n    ]);\n    this.OR2([\n      {\n        ALT: () => {\n          this.CONSUME1(lexer.Identifier, { LABEL: 'groupName' });\n          this.CONSUME(lexer.Dot);\n          this.CONSUME2(lexer.Identifier, { LABEL: 'attributeName' });\n        },\n      },\n      {\n        ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'attributeName' }),\n      },\n    ]);\n\n    this.OPTION(() => {\n      this.CONSUME(lexer.LRound);\n      this.MANY_SEP({\n        SEP: lexer.Comma,\n        DEF: () => {\n          this.SUBRULE(this.attributeArg);\n        },\n      });\n      this.CONSUME(lexer.RRound);\n    });\n  });\n\n  private attributeArg = this.RULE('attributeArg', () => {\n    this.OR([\n      {\n        ALT: () => this.SUBRULE(this.keyedArg, { LABEL: 'value' }),\n      },\n      {\n        ALT: () => this.SUBRULE(this.value, { LABEL: 'value' }),\n      },\n    ]);\n  });\n\n  private component = this.RULE('component', () => {\n    const type = this.OR1([\n      { ALT: () => this.CONSUME(lexer.Datasource, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Generator, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Model, { LABEL: 'type' }) },\n      { ALT: () => this.CONSUME(lexer.Enum, { LABEL: 'type' }) },\n    ]);\n    this.OR2([\n      {\n        ALT: () => {\n          this.CONSUME1(lexer.Identifier, { LABEL: 'groupName' });\n          this.CONSUME(lexer.Dot);\n          this.CONSUME2(lexer.Identifier, { LABEL: 'componentName' });\n        },\n      },\n      {\n        ALT: () => this.CONSUME(lexer.Identifier, { LABEL: 'componentName' }),\n      },\n    ]);\n\n    this.SUBRULE(this.block, {\n      ARGS: [{ componentType: type.image as ComponentType }],\n    });\n  });\n\n  private comment = this.RULE('comment', () => {\n    this.CONSUME(lexer.Comment, { LABEL: 'text' });\n  });\n\n  public schema = this.RULE('schema', () => {\n    this.MANY(() => {\n      this.OR([\n        { ALT: () => this.SUBRULE(this.comment, { LABEL: 'list' }) },\n        { ALT: () => this.SUBRULE(this.component, { LABEL: 'list' }) },\n        { ALT: () => this.SUBRULE(this.break, { LABEL: 'list' }) },\n        { ALT: () => this.CONSUME(lexer.LineBreak) },\n      ]);\n    });\n  });\n}\n\nexport const parser = new PrismaParser();\n","import { CstNode, IToken } from '@chevrotain/types';\nimport { parser } from './parser';\nimport * as Types from './getSchema';\n\nconst BasePrismaVisitor = parser.getBaseCstVisitorConstructorWithDefaults();\nexport class PrismaVisitor extends BasePrismaVisitor {\n  constructor() {\n    super();\n    this.validateVisitor();\n  }\n\n  schema(ctx: CstNode & { list: CstNode[] }): Types.Schema {\n    const list = ctx.list?.map(item => this.visit([item])) || [];\n    return { type: 'schema', list };\n  }\n\n  component(\n    ctx: CstNode & {\n      type: [IToken];\n      componentName: [IToken];\n      block: [CstNode];\n    }\n  ): Types.Block {\n    const [{ image: type }] = ctx.type;\n    const [{ image: name }] = ctx.componentName;\n    const list = this.visit(ctx.block);\n\n    switch (type) {\n      case 'datasource':\n        return { type: 'datasource', name, assignments: list };\n      case 'generator':\n        return { type: 'generator', name, assignments: list };\n      case 'model':\n        return { type: 'model', name, properties: list };\n      case 'enum':\n        return { type: 'enum', name, enumerators: list };\n      default:\n        throw new Error(`Unexpected block type: ${type}`);\n    }\n  }\n\n  break(): Types.Break {\n    return { type: 'break' };\n  }\n\n  comment(ctx: CstNode & { text: [IToken] }): Types.Comment {\n    const [{ image: comment }] = ctx.text;\n    return { type: 'comment', text: comment };\n  }\n\n  block(ctx: CstNode & { list: CstNode[] }): Types.Block[] {\n    return ctx.list?.map(item => this.visit([item]));\n  }\n\n  assignment(\n    ctx: CstNode & { assignmentName: [IToken]; assignmentValue: [CstNode] }\n  ): Types.Assignment {\n    const value = this.visit(ctx.assignmentValue);\n    const [{ image: key }] = ctx.assignmentName;\n    return { type: 'assignment', key, value };\n  }\n\n  field(\n    ctx: CstNode & {\n      fieldName: [IToken];\n      fieldType: [CstNode];\n      array: [IToken];\n      optional: [IToken];\n      attributeList: CstNode[];\n      comment: [IToken];\n    }\n  ): Types.Field {\n    const fieldType = this.visit(ctx.fieldType);\n    const [{ image: name }] = ctx.fieldName;\n    const attributes =\n      ctx.attributeList && ctx.attributeList.map(item => this.visit([item]));\n    const comment = ctx.comment?.[0]?.image;\n    return {\n      type: 'field',\n      name,\n      fieldType,\n      array: ctx.array != null,\n      optional: ctx.optional != null,\n      attributes,\n      comment,\n    };\n  }\n\n  attribute(\n    ctx: CstNode & {\n      modelAttribute: [IToken];\n      fieldAttribute: [IToken];\n      groupName: [IToken];\n      attributeName: [IToken];\n      attributeArg: CstNode[];\n    }\n  ): Types.Attr {\n    const [{ image: name }] = ctx.attributeName;\n    const [{ image: group }] = ctx.groupName || [{}];\n    const args =\n      ctx.attributeArg && ctx.attributeArg.map(attr => this.visit(attr));\n    const kind = ctx.modelAttribute != null ? 'model' : 'field';\n\n    return { type: 'attribute', name, kind, group, args };\n  }\n\n  attributeArg(ctx: CstNode & { value: [CstNode] }): Types.AttributeArgument {\n    const value = this.visit(ctx.value);\n    return { type: 'attributeArgument', value };\n  }\n\n  func(ctx: CstNode & { funcName: [IToken]; value: CstNode[]; keyedArg: CstNode[] }): Types.Func {\n    const [{ image: name }] = ctx.funcName;\n    const params = ctx.value && ctx.value.map(item => this.visit([item]));\n    const keyedParams = ctx.keyedArg && ctx.keyedArg.map(item => this.visit([item]));\n    const pars = (params || keyedParams) && [...(params ?? []), ...(keyedParams ?? [])];\n    return { type: 'function', name, params: pars };\n  }\n\n  array(ctx: CstNode & { value: CstNode[] }): Types.RelationArray {\n    const args = ctx.value && ctx.value.map(item => this.visit([item]));\n    return { type: 'array', args };\n  }\n\n  keyedArg(\n    ctx: CstNode & { keyName: [IToken]; value: [CstNode] }\n  ): Types.KeyValue {\n    const [{ image: key }] = ctx.keyName;\n    const value = this.visit(ctx.value);\n    return { type: 'keyValue', key, value };\n  }\n\n  value(ctx: CstNode & { value: [IToken] | [CstNode] }): Types.Value {\n    if (isToken(ctx.value)) {\n      const [{ image }] = ctx.value;\n      return image;\n    }\n    return this.visit(ctx.value);\n  }\n\n  enum(\n    ctx: CstNode & { enumName: [IToken]; comment: [IToken] }\n  ): Types.Enumerator {\n    const [{ image: name }] = ctx.enumName;\n    const comment = ctx.comment?.[0]?.image;\n    return { type: 'enumerator', name, comment };\n  }\n}\n\nfunction isToken(node: [IToken] | [CstNode]): node is [IToken] {\n  return 'image' in node[0];\n}\n","import { PrismaLexer } from './lexer';\nimport { PrismaVisitor } from './visitor';\nimport { parser } from './parser';\n\nexport function getSchema(source: string): Schema {\n  const lexingResult = PrismaLexer.tokenize(source);\n  parser.input = lexingResult.tokens;\n  const cstNode = parser.schema();\n  if (parser.errors.length > 0) throw parser.errors[0];\n  const visitor = new PrismaVisitor();\n  return visitor.visit(cstNode);\n}\n\nexport interface Schema {\n  type: 'schema';\n  list: Block[];\n}\n\nexport type Block = Model | Datasource | Generator | Enum | Comment | Break;\n\nexport interface Model {\n  type: 'model';\n  name: string;\n  properties: Array<Property | Comment | Break>;\n}\n\nexport interface Datasource {\n  type: 'datasource';\n  name: string;\n  assignments: Array<Assignment | Comment | Break>;\n}\n\nexport interface Generator {\n  type: 'generator';\n  name: string;\n  assignments: Array<Assignment | Comment | Break>;\n}\n\nexport interface Enum {\n  type: 'enum';\n  name: string;\n  enumerators: Array<Enumerator | Comment | Break>;\n}\n\nexport interface Comment {\n  type: 'comment';\n  text: string;\n}\n\nexport interface Break {\n  type: 'break';\n}\n\nexport type Property = GroupedModelAttribute | ModelAttribute | Field;\n\nexport interface Assignment {\n  type: 'assignment';\n  key: string;\n  value: Value;\n}\n\nexport interface Enumerator {\n  type: 'enumerator';\n  name: string;\n  value?: Value;\n  comment?: string;\n}\n\nexport interface ModelAttribute {\n  type: 'attribute';\n  kind: 'model';\n  group?: string;\n  name: string;\n  args: AttributeArgument[];\n}\n\nexport type GroupedModelAttribute = ModelAttribute & { group: string };\n\nexport interface Field {\n  type: 'field';\n  name: string;\n  fieldType: string | Func;\n  array?: boolean;\n  optional?: boolean;\n  attributes?: Attribute[];\n  comment?: string;\n}\n\nexport type Attr =\n  | Attribute\n  | GroupedAttribute\n  | ModelAttribute\n  | GroupedModelAttribute;\n\nexport interface Attribute {\n  type: 'attribute';\n  kind: 'field';\n  group?: string;\n  name: string;\n  args?: AttributeArgument[];\n}\n\nexport type GroupedAttribute = Attribute & { group: string };\n\nexport interface AttributeArgument {\n  type: 'attributeArgument';\n  value: KeyValue | Value | Func;\n}\n\nexport interface KeyValue {\n  type: 'keyValue';\n  key: string;\n  value: Value;\n}\n\nexport interface Func {\n  type: 'function';\n  name: string;\n  params: Value[];\n}\n\nexport interface RelationArray {\n  type: 'array';\n  args: string[];\n}\n\nexport type Value =\n  | string\n  | number\n  | boolean\n  | Func\n  | RelationArray\n  | Array<Value>;\n","import { Block, Schema } from './getSchema';\n\nconst unsorted = ['break', 'comment'];\nconst defaultSortOrder = [\n  'generator',\n  'datasource',\n  'model',\n  'enum',\n  'break',\n  'comment',\n];\n\nexport const schemaSorter = (\n  schema: Schema,\n  locales?: string | string[],\n  sortOrder: string[] = defaultSortOrder\n) => (a: Block, b: Block): number => {\n  // Preserve the position of comments and line breaks relative to their\n  // position in the file, since when a re-sort happens it wouldn't be\n  // clear whether a comment should affix to the object above or below it.\n  const aUnsorted = unsorted.indexOf(a.type) !== -1;\n  const bUnsorted = unsorted.indexOf(b.type) !== -1;\n\n  if (aUnsorted !== bUnsorted) {\n    return schema.list.indexOf(a) - schema.list.indexOf(b);\n  }\n\n  if (sortOrder !== defaultSortOrder)\n    sortOrder = sortOrder.concat(defaultSortOrder);\n  const typeIndex = sortOrder.indexOf(a.type) - sortOrder.indexOf(b.type);\n  if (typeIndex !== 0) return typeIndex;\n\n  // Resolve ties using the name of object's name.\n  if ('name' in a && 'name' in b) return a.name.localeCompare(b.name, locales);\n\n  // If all else fails, leave objects in their original position.\n  return 0;\n};\n","import * as Types from './getSchema';\nimport { EOL } from 'os';\nimport { schemaSorter } from './schemaSorter';\n\nexport interface PrintOptions {\n  sort?: boolean;\n  locales?: string | string[];\n  sortOrder?: Array<'generator' | 'datasource' | 'model' | 'enum'>;\n}\n\nexport function printSchema(\n  schema: Types.Schema,\n  options: PrintOptions = {}\n): string {\n  const { sort = false, locales = undefined, sortOrder = undefined } = options;\n  let blocks = schema.list;\n  if (sort) {\n    // no point in preserving line breaks when re-sorting\n    blocks = schema.list = blocks.filter(block => block.type !== 'break');\n    const sorter = schemaSorter(schema, locales, sortOrder);\n    blocks.sort(sorter);\n  }\n\n  return (\n    blocks\n      .map(printBlock)\n      .filter(Boolean)\n      .join(EOL)\n      .replace(/(\\r?\\n\\s*){3,}/g, EOL + EOL) + EOL\n  );\n}\n\nfunction printBlock(block: Types.Block): string {\n  switch (block.type) {\n    case 'comment':\n      return printComment(block);\n    case 'datasource':\n      return printDatasource(block);\n    case 'enum':\n      return printEnum(block);\n    case 'generator':\n      return printGenerator(block);\n    case 'model':\n      return printModel(block);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unrecognized block type`);\n  }\n}\n\nfunction printComment(comment: Types.Comment) {\n  return comment.text;\n}\n\nfunction printBreak() {\n  return EOL;\n}\n\nfunction printDatasource(db: Types.Datasource) {\n  const children = computeAssignmentFormatting(db.assignments);\n\n  return `\ndatasource ${db.name} {\n  ${children}\n}`;\n}\n\nfunction printEnum(enumerator: Types.Enum) {\n  const children = enumerator.enumerators\n    .map(printEnumerator)\n    .filter(Boolean)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n\n  return `\nenum ${enumerator.name} {\n  ${children}\n}`;\n}\n\nfunction printEnumerator(\n  enumerator: Types.Enumerator | Types.Attribute | Types.Comment | Types.Break\n) {\n  switch (enumerator.type) {\n    case 'enumerator':\n      return [enumerator.name, enumerator.comment].filter(Boolean).join(' ');\n    case 'attribute':\n      return printAttribute(enumerator);\n    case 'comment':\n      return printComment(enumerator);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unexpected enumerator type`);\n  }\n}\n\nfunction printGenerator(generator: Types.Generator) {\n  const children = computeAssignmentFormatting(generator.assignments);\n\n  return `\ngenerator ${generator.name} {\n  ${children}\n}`;\n}\n\nfunction printModel(model: Types.Model) {\n  const children = computePropertyFormatting(model.properties);\n\n  return `\nmodel ${model.name} {\n  ${children}\n}`;\n}\n\nfunction printAssignment(\n  node: Types.Assignment | Types.Comment | Types.Break,\n  keyLength = 0\n) {\n  switch (node.type) {\n    case 'comment':\n      return printComment(node);\n    case 'break':\n      return printBreak();\n    case 'assignment':\n      return `${node.key.padEnd(keyLength)} = ${printValue(node.value)}`;\n    default:\n      throw new Error(`Unexpected assignment type`);\n  }\n}\n\nfunction printProperty(\n  node: Types.Property | Types.Comment | Types.Break,\n  nameLength = 0,\n  typeLength = 0\n) {\n  switch (node.type) {\n    case 'attribute':\n      return printAttribute(node);\n    case 'field':\n      return printField(node, nameLength, typeLength);\n    case 'comment':\n      return printComment(node);\n    case 'break':\n      return printBreak();\n    default:\n      throw new Error(`Unrecognized property type`);\n  }\n}\n\nfunction printAttribute(attribute: Types.Attribute | Types.ModelAttribute) {\n  const args =\n    attribute.args && attribute.args.length > 0\n      ? `(${attribute.args\n          .map(printAttributeArg)\n          .filter(Boolean)\n          .join(', ')})`\n      : '';\n\n  const name = [attribute.name];\n  if (attribute.group) name.unshift(attribute.group);\n\n  return `${attribute.kind === 'field' ? '@' : '@@'}${name.join('.')}${args}`;\n}\n\nfunction printAttributeArg(arg: Types.AttributeArgument) {\n  return printValue(arg.value);\n}\n\nfunction printField(field: Types.Field, nameLength = 0, typeLength = 0) {\n  const name = field.name.padEnd(nameLength);\n  const fieldType = printFieldType(field).padEnd(typeLength);\n  const attrs = field.attributes ? field.attributes.map(printAttribute) : [];\n  const comment = field.comment;\n  return (\n    [name, fieldType, ...attrs]\n      .filter(Boolean)\n      .join(' ')\n      // comments ignore indents\n      .trim() + (comment ? ` ${comment}` : '')\n  );\n}\n\nfunction printFieldType(field: Types.Field) {\n  const suffix = field.array ? '[]' : field.optional ? '?' : '';\n\n  if (typeof field.fieldType === 'object') {\n    switch (field.fieldType.type) {\n      case 'function': {\n        return `${printFunction(field.fieldType)}${suffix}`;\n      }\n      default:\n        throw new Error(`Unexpected field type`);\n    }\n  }\n\n  return `${field.fieldType}${suffix}`;\n}\n\nfunction printFunction(func: Types.Func) {\n  const params = func.params ? func.params.map(printValue) : '';\n  return `${func.name}(${params})`;\n}\n\nfunction printValue(value: Types.KeyValue | Types.Value): string {\n  switch (typeof value) {\n    case 'object': {\n      if ('type' in value) {\n        switch (value.type) {\n          case 'keyValue':\n            return `${value.key}: ${printValue(value.value)}`;\n          case 'function':\n            return printFunction(value);\n          case 'array':\n            return `[${\n              value.args != null ? value.args.map(printValue).join(', ') : ''\n            }]`;\n          default:\n            throw new Error(`Unexpected value type`);\n        }\n      }\n\n      throw new Error(`Unexpected object value`);\n    }\n    default:\n      return String(value);\n  }\n}\n\nfunction computeAssignmentFormatting(\n  list: Array<Types.Comment | Types.Break | Types.Assignment>\n) {\n  let pos = 0;\n  const listBlocks = list.reduce<Array<typeof list>>(\n    (memo, current, index, arr) => {\n      if (current.type === 'break') return memo;\n      if (index > 0 && arr[index - 1].type === 'break') memo[++pos] = [];\n      memo[pos].push(current);\n      return memo;\n    },\n    [[]]\n  );\n\n  const keyLengths = listBlocks.map(lists =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'assignment' ? current.key.length : 0\n        ),\n      0\n    )\n  );\n\n  return list\n    .map((item, index, arr) => {\n      if (index > 0 && item.type !== 'break' && arr[index - 1].type === 'break')\n        keyLengths.shift();\n      return printAssignment(item, keyLengths[0]);\n    })\n    .filter(Boolean)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n}\n\nfunction computePropertyFormatting(\n  list: Array<Types.Break | Types.Comment | Types.Property>\n) {\n  let pos = 0;\n  const listBlocks = list.reduce<Array<typeof list>>(\n    (memo, current, index, arr) => {\n      if (current.type === 'break') return memo;\n      if (index > 0 && arr[index - 1].type === 'break') memo[++pos] = [];\n      memo[pos].push(current);\n      return memo;\n    },\n    [[]]\n  );\n\n  const nameLengths = listBlocks.map(lists =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'field' ? current.name.length : 0\n        ),\n      0\n    )\n  );\n\n  const typeLengths = listBlocks.map(lists =>\n    lists.reduce(\n      (max, current) =>\n        Math.max(\n          max,\n          // perhaps someone more typescript-savy than I am can fix this\n          current.type === 'field' ? printFieldType(current).length : 0\n        ),\n      0\n    )\n  );\n\n  return list\n    .map((prop, index, arr) => {\n      if (\n        index > 0 &&\n        prop.type !== 'break' &&\n        arr[index - 1].type === 'break'\n      ) {\n        nameLengths.shift();\n        typeLengths.shift();\n      }\n\n      return printProperty(prop, nameLengths[0], typeLengths[0]);\n    })\n    .filter(Boolean)\n    .join(`${EOL}  `)\n    .replace(/(\\r?\\n\\s*){3,}/g, `${EOL + EOL}  `);\n}\n","import * as schema from './getSchema';\nimport { PrintOptions, printSchema } from './printSchema';\n\n/** Returns the function type Original with its return type changed to NewReturn. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ReplaceReturnType<Original extends (...args: any) => any, NewReturn> = (\n  ...a: Parameters<Original>\n) => NewReturn;\n\n/**\n * Methods with return values that do not propagate the builder should not have\n * their return value modified by the type replacement system below\n * */\ntype ExtractKeys = 'getSchema' | 'getSubject' | 'getParent' | 'print';\n\n/** These keys preserve the return value context that they were given */\ntype NeutralKeys = 'break' | 'comment' | 'attribute' | 'enumerator';\n\n/** Keys allowed when you call .datasource() or .generator() */\ntype DatasourceOrGeneratorKeys = 'assignment';\n\n/** Keys allowed when you call .enum(\"name\") */\ntype EnumKeys = 'enumerator';\n\n/** Keys allowed when you call .field(\"name\") */\ntype FieldKeys = 'attribute';\n\n/** Keys allowed when you call .model(\"name\") */\ntype ModelKeys = 'blockAttribute' | 'field';\n\n/**\n * Utility type for making the PrismaSchemaBuilder below readable:\n * Removes methods from the builder that are prohibited based on the context\n * the builder is in. For example, you can add fields to a model, but you can't\n * add fields to an enum or a datasource.\n */\ntype PrismaSchemaSubset<\n  Universe extends keyof ConcretePrismaSchemaBuilder,\n  Method\n> = ReplaceReturnType<\n  ConcretePrismaSchemaBuilder[Universe],\n  PrismaSchemaBuilder<Exclude<keyof ConcretePrismaSchemaBuilder, Method>>\n>;\n\n/**\n * The brain of this whole operation: depending on the key of the method name\n * we receive, filter the available list of method calls the user can make to\n * prevent them from making invalid calls, such as builder.datasource().field()\n * */\ntype PrismaSchemaBuilder<K extends keyof ConcretePrismaSchemaBuilder> = {\n  [U in K]: U extends ExtractKeys\n    ? ConcretePrismaSchemaBuilder[U]\n    : U extends NeutralKeys\n    ? ConcretePrismaSchemaBuilder[U] //ReplaceReturnType<ConcretePrismaSchemaBuilder[U], PrismaSchemaBuilder<K>>\n    : U extends 'datasource'\n    ? PrismaSchemaSubset<U, 'datasource' | EnumKeys | FieldKeys | ModelKeys>\n    : U extends 'generator'\n    ? PrismaSchemaSubset<U, EnumKeys | FieldKeys | ModelKeys>\n    : U extends 'model'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys | FieldKeys>\n    : U extends 'field'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | EnumKeys>\n    : U extends 'enum'\n    ? PrismaSchemaSubset<U, DatasourceOrGeneratorKeys | ModelKeys | FieldKeys>\n    : PrismaSchemaSubset<\n        U,\n        DatasourceOrGeneratorKeys | EnumKeys | FieldKeys | ModelKeys | 'comment'\n      >;\n};\n\ntype Arg =\n  | string\n  | {\n      name: string;\n      function?: Arg[];\n    };\ntype Parent = schema.Block | undefined;\ntype Subject = schema.Block | schema.Field | undefined;\n\nexport class ConcretePrismaSchemaBuilder {\n  private schema: schema.Schema;\n  private _subject: Subject;\n  private _parent: Parent;\n\n  constructor(source = '') {\n    this.schema = schema.getSchema(source);\n  }\n\n  /** Prints the schema out as a source string */\n  print(options: PrintOptions = {}): string {\n    return printSchema(this.schema, options);\n  }\n\n  /** Returns the underlying schema object for more advanced use cases. */\n  getSchema(): schema.Schema {\n    return this.schema;\n  }\n\n  /** Adds or updates a generator block based on the name. */\n  generator(name: string, provider: string): this {\n    const generator: schema.Generator = this.schema.list.reduce<\n      schema.Generator\n    >(\n      (memo, block) =>\n        block.type === 'generator' && block.name === name ? block : memo,\n      {\n        type: 'generator',\n        name,\n        assignments: [\n          { type: 'assignment', key: 'provider', value: `\"${provider}\"` },\n        ],\n      }\n    );\n\n    this.schema.list.push(generator);\n    this._subject = generator;\n    return this;\n  }\n\n  drop(name: string): this {\n    const index = this.schema.list.findIndex(\n      block => 'name' in block && block.name === name\n    );\n    this.schema.list.splice(index, 1);\n    return this;\n  }\n\n  /** Sets the datasource for the schema. */\n  datasource(provider: string, url: string | { env: string }): this {\n    const datasource: schema.Datasource = {\n      type: 'datasource',\n      name: 'db',\n      assignments: [\n        {\n          type: 'assignment',\n          key: 'url',\n          value:\n            typeof url === 'string'\n              ? `\"${url}\"`\n              : { type: 'function', name: 'env', params: [`\"${url.env}\"`] },\n        },\n        { type: 'assignment', key: 'provider', value: provider },\n      ],\n    };\n    const existingIndex = this.schema.list.findIndex(\n      block => block.type === 'datasource'\n    );\n    this.schema.list.splice(\n      existingIndex,\n      existingIndex !== -1 ? 1 : 0,\n      datasource\n    );\n    this._subject = datasource;\n    return this;\n  }\n\n  /** Adds or updates a model based on the name. Can be chained with .field() or .modelAttribute() to add to it. */\n  model(name: string): this {\n    const model: schema.Model = { type: 'model', name, properties: [] };\n    this.schema.list.push(model);\n    this._subject = model;\n    return this;\n  }\n\n  /** Adds or updates an enum based on the name. Can be chained with .enumerator() to add a value to it. */\n  enum(name: string, enumeratorNames: string[] = []): this {\n    const e: schema.Enum = {\n      type: 'enum',\n      name,\n      enumerators: enumeratorNames.map(name => ({ type: 'enumerator', name })),\n    };\n    this.schema.list.push(e);\n    this._subject = e;\n    return this;\n  }\n\n  enumerator(value: string): this {\n    const subject = this.getSubject<schema.Enum>();\n    if (!subject || !('type' in subject) || subject.type !== 'enum') {\n      throw new Error('Subject must be a prisma model!');\n    }\n\n    subject.enumerators.push({ type: 'enumerator', name: value });\n    return this;\n  }\n\n  /**\n   * Returns the current subject, such as a model, field, or enum.\n   * @example\n   * builder.getModel('User').field('firstName').getSubject() // the firstName field\n   * */\n  private getSubject<S extends Subject>(): S {\n    return this._subject as S;\n  }\n\n  /** Returns the parent of the current subject when in a nested context. The parent of a field is its model. */\n  private getParent<S extends Parent = schema.Model>(): S {\n    return this._parent as S;\n  }\n\n  /**\n   * Adds a block-level attribute to the current model.\n   * @example\n   * builder.model('Project')\n   *   .blockAttribute(\"map\", \"projects\")\n   *   .blockAttribute(\"unique\", [\"firstName\", \"lastName\"]) // @@unique([firstName, lastName])\n   * */\n  blockAttribute(\n    name: string,\n    args?: string | string[] | Record<string, schema.Value>\n  ): this {\n    let subject = this.getSubject<schema.Model>();\n    if (!subject || !('type' in subject) || subject.type !== 'model') {\n      const parent = this.getParent<schema.Model>();\n      if (!parent || !('type' in parent) || parent.type !== 'model')\n        throw new Error('Subject must be a prisma model!');\n\n      subject = this._subject = parent;\n    }\n\n    const attributeArgs = ((): schema.AttributeArgument[] => {\n      if (!args) return [] as schema.AttributeArgument[];\n      if (typeof args === 'string')\n        return [{ type: 'attributeArgument', value: `\"${args}\"` }];\n      if (Array.isArray(args))\n        return [{ type: 'attributeArgument', value: { type: 'array', args } }];\n      return Object.entries(args).map(([key, value]) => ({\n        type: 'attributeArgument',\n        value: { type: 'keyValue', key, value },\n      }));\n    })();\n\n    const property: schema.ModelAttribute = {\n      type: 'attribute',\n      kind: 'model',\n      name,\n      args: attributeArgs,\n    };\n    subject.properties.push(property);\n    return this;\n  }\n\n  /** Adds an attribute to the current field. */\n  attribute<T extends schema.Field>(\n    name: string,\n    args?: Arg[] | Record<string, string[]>\n  ): this {\n    const parent = this.getParent();\n    const subject = this.getSubject<T>();\n    if (!parent || !('type' in parent) || parent.type !== 'model') {\n      throw new Error('Parent must be a prisma model!');\n    }\n\n    if (!subject || !('type' in subject) || subject.type !== 'field') {\n      throw new Error('Subject must be a prisma field!');\n    }\n\n    if (!subject.attributes) subject.attributes = [];\n    const attribute = subject.attributes.reduce<schema.Attribute>(\n      (memo, attr) =>\n        attr.type === 'attribute' && attr.name === name ? attr : memo,\n      {\n        type: 'attribute',\n        kind: 'field',\n        name,\n      }\n    );\n\n    if (Array.isArray(args)) {\n      const mapArg = (arg: Arg): schema.Value | schema.Func => {\n        return typeof arg === 'string'\n          ? arg\n          : {\n              type: 'function',\n              name: arg.name,\n              params: arg.function?.map(mapArg) ?? [],\n            };\n      };\n\n      if (args.length > 0)\n        attribute.args = args.map(arg => ({\n          type: 'attributeArgument',\n          value: mapArg(arg),\n        }));\n    } else if (typeof args === 'object') {\n      attribute.args = Object.entries(args).map(([key, value]) => ({\n        type: 'attributeArgument',\n        value: { type: 'keyValue', key, value: { type: 'array', args: value } },\n      }));\n    }\n\n    if (!subject.attributes.includes(attribute))\n      subject.attributes.push(attribute);\n\n    return this;\n  }\n\n  /** Add an assignment to a generator or datasource */\n  assignment<T extends schema.Generator | schema.Datasource>(\n    key: string,\n    value: string\n  ): this {\n    const subject = this.getSubject<T>();\n    if (\n      !subject ||\n      !('type' in subject) ||\n      !['generator', 'datasource'].includes(subject.type)\n    )\n      throw new Error('Subject must be a prisma generator or datasource!');\n\n    function tap<T>(subject: T, callback: (s: T) => void) {\n      callback(subject);\n      return subject;\n    }\n\n    const assignment = subject.assignments.reduce<schema.Assignment>(\n      (memo, assignment) =>\n        assignment.type === 'assignment' && assignment.key === key\n          ? tap(assignment, a => {\n              a.value = `\"${value}\"`;\n            })\n          : memo,\n      {\n        type: 'assignment',\n        key,\n        value: `\"${value}\"`,\n      }\n    );\n\n    if (!subject.assignments.includes(assignment))\n      subject.assignments.push(assignment);\n\n    return this;\n  }\n\n  private blockInsert(statement: schema.Break | schema.Comment): this {\n    let subject = this.getSubject<schema.Block>();\n    const allowed = ['datasource', 'enum', 'generator', 'model'];\n    if (!subject || !('type' in subject) || !allowed.includes(subject.type)) {\n      const parent = this.getParent<schema.Block>();\n      if (!parent || !('type' in parent) || !allowed.includes(parent.type)) {\n        throw new Error('Subject must be a prisma block!');\n      }\n\n      subject = this._subject = parent;\n    }\n\n    switch (subject.type) {\n      case 'datasource': {\n        subject.assignments.push(statement);\n        break;\n      }\n      case 'enum': {\n        subject.enumerators.push(statement);\n        break;\n      }\n      case 'generator': {\n        subject.assignments.push(statement);\n        break;\n      }\n      case 'model': {\n        subject.properties.push(statement);\n        break;\n      }\n    }\n    return this;\n  }\n\n  /** Add a line break */\n  break(): this {\n    const lineBreak: schema.Break = { type: 'break' };\n    return this.blockInsert(lineBreak);\n  }\n\n  /**\n   * Add a comment. Regular comments start with // and do not appear in the\n   * prisma AST. Node comments start with /// and will appear in the AST,\n   * affixed to the node that follows the comment.\n   * */\n  comment(text: string, node = false): this {\n    const comment: schema.Comment = {\n      type: 'comment',\n      text: `//${node ? '/' : ''} ${text}`,\n    };\n    return this.blockInsert(comment);\n  }\n\n  /**\n   * Add a comment to the schema. Regular comments start with // and do not appear in the\n   * prisma AST. Node comments start with /// and will appear in the AST,\n   * affixed to the node that follows the comment.\n   * */\n  schemaComment(text: string, node = false): this {\n    const comment: schema.Comment = {\n      type: 'comment',\n      text: `//${node ? '/' : ''} ${text}`,\n    };\n    this.schema.list.push(comment);\n    return this;\n  }\n\n  /** Add a field to the current model. The field can be customized further with one or more .attribute() calls. */\n  field(name: string, fieldType: string | schema.Func): this {\n    let subject = this.getSubject<schema.Model>();\n    if (!subject || !('type' in subject) || subject.type !== 'model') {\n      const parent = this.getParent<schema.Model>();\n      if (!parent || !('type' in parent) || parent.type !== 'model')\n        throw new Error('Subject must be a prisma model!');\n\n      subject = this._subject = parent;\n    }\n\n    const field: schema.Field = {\n      type: 'field',\n      name,\n      fieldType,\n    };\n    subject.properties.push(field);\n    this._parent = subject;\n    this._subject = field;\n    return this;\n  }\n\n  /**\n   * Returns the current subject, allowing for more advanced ways of\n   * manipulating the schema.\n   * */\n  then<R extends schema.Block>(callback: (subject: R) => R): this {\n    callback(this._subject as R);\n    return this;\n  }\n}\n\nexport function createPrismaSchemaBuilder(\n  source?: string\n): PrismaSchemaBuilder<\n  Exclude<\n    keyof ConcretePrismaSchemaBuilder,\n    DatasourceOrGeneratorKeys | EnumKeys | FieldKeys | ModelKeys\n  >\n> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new ConcretePrismaSchemaBuilder(source) as any;\n}\n"],"names":["Identifier","createToken","name","pattern","Datasource","push_mode","Generator","Model","Enum","True","longer_alt","False","Null","Comment","Lexer","NA","DocComment","categories","LineComment","Attribute","ModelAttribute","label","FieldAttribute","Dot","QuestionMark","LCurly","RCurly","pop_mode","LRound","RRound","LSquare","RSquare","Comma","Colon","Equals","StringLiteral","NumberLiteral","WhiteSpace","group","SKIPPED","LineBreak","line_breaks","naTokens","multiModeTokens","modes","global","block","defaultMode","PrismaLexer","PrismaParser","lexer","RULE","CONSUME1","CONSUME2","CONSUME","LABEL","SUBRULE","value","MANY_SEP","SEP","DEF","OR","ALT","keyedArg","array","func","OPTION1","MANY","attribute","OPTION2","options","componentType","isEnum","isModel","comment","GATE","property","field","assignment","OPTION","OR1","OR2","attributeArg","type","ARGS","image","component","performSelfAnalysis","CstParser","parser","BasePrismaVisitor","getBaseCstVisitorConstructorWithDefaults","PrismaVisitor","validateVisitor","schema","ctx","list","map","item","visit","componentName","assignments","properties","enumerators","Error","text","assignmentValue","assignmentName","key","fieldType","fieldName","attributes","attributeList","optional","attributeName","groupName","args","attr","kind","modelAttribute","funcName","params","keyedParams","pars","keyName","isToken","enumName","node","getSchema","source","lexingResult","tokenize","input","tokens","cstNode","errors","length","visitor","unsorted","defaultSortOrder","schemaSorter","locales","sortOrder","a","b","aUnsorted","indexOf","bUnsorted","concat","typeIndex","localeCompare","printSchema","sort","undefined","blocks","filter","sorter","printBlock","Boolean","join","EOL","replace","printComment","printDatasource","printEnum","printGenerator","printModel","printBreak","db","children","computeAssignmentFormatting","enumerator","printEnumerator","printAttribute","generator","model","computePropertyFormatting","printAssignment","keyLength","padEnd","printValue","printProperty","nameLength","typeLength","printField","printAttributeArg","unshift","arg","printFieldType","attrs","trim","suffix","printFunction","String","pos","listBlocks","reduce","memo","current","index","arr","push","keyLengths","lists","max","Math","shift","nameLengths","typeLengths","prop","ConcretePrismaSchemaBuilder","print","provider","_subject","drop","findIndex","splice","datasource","url","env","existingIndex","enumeratorNames","e","subject","getSubject","getParent","_parent","blockAttribute","parent","attributeArgs","Array","isArray","Object","entries","mapArg","includes","tap","callback","blockInsert","statement","allowed","lineBreak","schemaComment","then","createPrismaSchemaBuilder"],"mappings":"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"}